{"version":3,"file":"static/js/12.a51daad3.chunk.js","mappings":"qQACA,GAAgB,WAAa,6BAA6B,UAAY,4BAA4B,UAAY,4BAA4B,UAAY,6B,SC8BtJ,EA1BiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAElB,OACE,iCACE,gBAAKC,UAAWC,EAAAA,WAAhB,mBACA,eAAID,UAAWC,EAAAA,UAAf,SACGF,EAAKG,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,gBAAkBN,UAAWC,EAAAA,UAA7B,WACE,gBACEM,IACmB,OAAjBJ,EAVK,kCAUkCA,EAAeK,EAExDC,IAAKJ,EACLK,MAAM,SAER,cAAGV,UAAWC,EAAAA,UAAd,SAA8BI,KAC9B,eAAGL,UAAWC,EAAAA,eAAd,wBAA8CK,OATvCF,EAYZ,QAIR,E,6BCWD,EAjCa,WACX,OAAkCO,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBN,GAAa,GADG,mBAGKO,EAAAA,EAAAA,IAAaJ,GAHlB,UAIM,KADdK,EAHQ,QAILC,OAJK,iDAOdX,EAAaU,GAPC,kDASdN,EAAS,EAAD,IATM,yBAWdF,GAAa,GAXC,6EAAH,qDAcfM,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAa,SAACW,EAAA,EAAD,IACbb,GAAY,SAAC,EAAD,CAAUb,KAAMa,KAAgB,sCAC5CI,GAASU,IAAAA,OAAAA,QAAwB,4BAGvC,C,kMCpCKC,EAAW,+BACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAHzC,cAEGG,EAFH,yBAKIA,EAASR,KAAKS,SALlB,gCAOHC,QAAQjB,MAAM,+BAPX,gFAWA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCO,IAHpD,cAEGJ,EAFH,yBAKIA,EAASR,KAAKS,SALlB,gCAOHC,QAAQjB,MAAM,2BAPX,gFAWA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,oBACoBT,IAHxC,cAEGG,EAFH,gBAKUA,EAASR,KALnB,wEAOHU,QAAQjB,MAAM,wBAAd,MAPG,gFAWA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4Be,GAA5B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,4BAC4BT,IAHhD,cAEGG,EAFH,yBAKIA,EAASR,KAAKxB,MALlB,gCAOHkC,QAAQjB,MAAM,2BAPX,gFAWA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,4BAC4BT,IAHhD,cAEGG,EAFH,yBAKIA,EAASR,KAAKS,SALlB,gCAOHC,QAAQjB,MAAM,8BAPX,gF","sources":["webpack://react-homework-template/./src/components/CastList/CastList.module.css?59ac","components/CastList/CastList.jsx","pages/Cast/Cast.jsx","services/fetchAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cast_title\":\"CastList_cast_title__J-WRh\",\"cast_list\":\"CastList_cast_list__Npm5C\",\"cast_item\":\"CastList_cast_item__EyxHv\",\"cast_name\":\"CastList_cast_name__meBia\"};","import React from 'react';\nimport noPoster from 'images/noPoster.png';\nimport css from './CastList.module.css';\nimport PropTypes from 'prop-types';\n\nconst CastList = ({ cast }) => {\n  const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w200';\n  return (\n    <>\n      <div className={css.cast_title}>Cast</div>\n      <ul className={css.cast_list}>\n        {cast.map(({ profile_path, cast_id, name, character }) => {\n          return (\n            <li key={cast_id} className={css.cast_item}>\n              <img\n                src={\n                  profile_path !== null ? BASE_IMG_URL + profile_path : noPoster\n                }\n                alt={name}\n                width=\"200\"\n              />\n              <p className={css.cast_name}>{name}</p>\n              <p className={css.cast_character}>Character: {character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CastList;\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      profile_path: PropTypes.string,\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/fetchAPI';\nimport CastList from 'components/CastList/CastList';\nimport Loader from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieCast(movieId);\n        if (data.length === 0) {\n          return;\n        }\n        setMovieCast(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movieCast ? <CastList cast={movieCast} /> : <p>No results</p>}\n      {error && Notiflix.Notify.failure('Sorry, something wrong')}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e58952305d798b0bf4a300c9b516b346';\n\nexport async function getTrendingMovies() {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('getTrendingFilms error' + error);\n  }\n}\n\nexport async function searchMovies(query) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('searchMovies error' + error);\n  }\n}\n\nexport async function getMovieDetails(movie_id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movie_id}?api_key=${API_KEY}`\n    );\n    return await response.data;\n  } catch (error) {\n    console.error('getMovieDetails error', error);\n  }\n}\n\nexport async function getMovieCast(movie_id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movie_id}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error('getMovieCast error' + error);\n  }\n}\n\nexport async function getMovieReviews(movie_id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movie_id}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('getMovieReviews error' + error);\n  }\n}\n"],"names":["cast","className","css","map","profile_path","cast_id","name","character","src","noPoster","alt","width","useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchCast","getMovieCast","data","length","Loader","Notiflix","BASE_URL","API_KEY","getTrendingMovies","axios","response","results","console","searchMovies","query","getMovieDetails","movie_id","getMovieReviews"],"sourceRoot":""}