{"version":3,"file":"static/js/642.c1acb54a.chunk.js","mappings":"yRACA,EAA+B,kCAA/B,EAAoF,sCAApF,EAA0I,mCAA1I,EAA2L,iC,SCqB3L,EAlBoB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACrB,OACE,iCACE,gBAAKC,UAAWC,EAAhB,sBACA,eAAID,UAAWC,EAAf,SACGF,EAAOG,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,QACzB,OACE,2BACE,eAAGL,UAAWC,EAAd,qBAA0CE,MAC1C,cAAGH,UAAWC,EAAd,SAAgCI,MAFzBD,EAKZ,QAIR,ECwBD,EArCgB,WACd,OAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBN,GAAa,GADM,mBAGEO,EAAAA,EAAAA,IAAgBJ,GAHlB,UAIG,KADdK,EAHW,QAIRC,OAJQ,iDAOjBX,EAAgBU,GAPC,kDASjBN,EAAS,EAAD,IATS,yBAWjBF,GAAa,GAXI,6EAAH,qDAclBM,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAa,SAACW,EAAA,EAAD,IACbb,GACC,SAAC,EAAD,CAAaR,OAAQQ,KAErB,oEAEDI,GAASU,IAAAA,OAAAA,QAAwB,4BAGvC,C,kMCxCKC,EAAW,+BACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAHzC,cAEGG,EAFH,yBAKIA,EAASR,KAAKS,SALlB,gCAOHC,QAAQjB,MAAM,+BAPX,gFAWA,SAAekB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gGAEoBL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,kBACgCO,IAHpD,cAEGJ,EAFH,yBAKIA,EAASR,KAAKS,SALlB,gCAOHC,QAAQjB,MAAM,2BAPX,gFAWA,SAAeoB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,oBACoBT,IAHxC,cAEGG,EAFH,gBAKUA,EAASR,KALnB,wEAOHU,QAAQjB,MAAM,wBAAd,MAPG,gFAWA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,4BAC4BT,IAHhD,cAEGG,EAFH,yBAKIA,EAASR,KAAKgB,MALlB,gCAOHN,QAAQjB,MAAM,2BAPX,gFAWA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+Be,GAA/B,gGAEoBP,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAU,EADA,4BAC4BT,IAHhD,cAEGG,EAFH,yBAKIA,EAASR,KAAKS,SALlB,gCAOHC,QAAQjB,MAAM,8BAPX,gF","sources":["webpack://react-homework-template/./src/components/ReviewsList/ReviewsList.module.css?071b","components/ReviewsList/ReviewsList.jsx","pages/Reviews/Reviews.jsx","services/fetchAPI.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"review_title\":\"ReviewsList_review_title__60aGe\",\"review_container\":\"ReviewsList_review_container__xA-c8\",\"review_author\":\"ReviewsList_review_author__EbCvD\",\"review_text\":\"ReviewsList_review_text__qARge\"};","import React from 'react';\nimport css from './ReviewsList.module.css';\nimport PropTypes from 'prop-types';\n\nconst ReviewsList = ({ review }) => {\n  return (\n    <>\n      <div className={css.review_title}>Reviews</div>\n      <ul className={css.review_container}>\n        {review.map(({ author, id, content }) => {\n          return (\n            <li key={id}>\n              <p className={css.review_author}>Autror: {author}</p>\n              <p className={css.review_text}>{content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ReviewsList;\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/fetchAPI';\nimport Loader from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport ReviewsList from 'components/ReviewsList/ReviewsList';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieReviews(movieId);\n        if (data.length === 0) {\n          return;\n        }\n        setMovieReviews(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {movieReviews ? (\n        <ReviewsList review={movieReviews} />\n      ) : (\n        <p>We don't have any reviews for this movie</p>\n      )}\n      {error && Notiflix.Notify.failure('Sorry, something wrong')}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e58952305d798b0bf4a300c9b516b346';\n\nexport async function getTrendingMovies() {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('getTrendingFilms error' + error);\n  }\n}\n\nexport async function searchMovies(query) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('searchMovies error' + error);\n  }\n}\n\nexport async function getMovieDetails(movie_id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movie_id}?api_key=${API_KEY}`\n    );\n    return await response.data;\n  } catch (error) {\n    console.error('getMovieDetails error', error);\n  }\n}\n\nexport async function getMovieCast(movie_id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movie_id}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.error('getMovieCast error' + error);\n  }\n}\n\nexport async function getMovieReviews(movie_id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/movie/${movie_id}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('getMovieReviews error' + error);\n  }\n}\n"],"names":["review","className","css","map","author","id","content","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchReviews","getMovieReviews","data","length","Loader","Notiflix","BASE_URL","API_KEY","getTrendingMovies","axios","response","results","console","searchMovies","query","getMovieDetails","movie_id","getMovieCast","cast"],"sourceRoot":""}